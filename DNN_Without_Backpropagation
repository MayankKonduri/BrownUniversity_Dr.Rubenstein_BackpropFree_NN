import torch
import torch.nn as nn
import torch.optim as optim

class ForwardForwardDNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(ForwardForwardDNN, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, output_size)
    
    def forward_pass(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.sigmoid(self.fc2(x))
        return x

    def forward(self, x_positive, x_negative):
        positive_activation = self.forward_pass(x_positive)
        negative_activation = self.forward_pass(x_negative)
        return positive_activation, negative_activation

input_size = 10
hidden_size = 20
output_size = 1
learning_rate = 0.01
epochs = 100

model = ForwardForwardDNN(input_size, hidden_size, output_size)
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

for epoch in range(epochs):
    real_data = torch.randn(64, input_size)
    negative_data = torch.randn(64, input_size)
    
    positive_activation, negative_activation = model(real_data, negative_data)
    
    loss = torch.mean((positive_activation - negative_activation) ** 2)
    
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    if (epoch + 1) % 10 == 0:
        print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')

print("Training with Forward-Forward completed.")
